// Descomentar si se se va a usar un Listener para iniciar la conexión:
//package listener;
//Comentar si se va a usar un Listner para iniciar la conexión:
package listener;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Logger;

// Descomentar si se se va a usar un Listener para iniciar la conexión:
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.annotation.WebListener;

//Descomentar si se se va a usar un Listener para iniciar la conexión:
@WebListener
public class ServletContextListener implements javax.servlet.ServletContextListener {

	// Comentar si se va a usar un Listener para iniciar la conexión:
	// public class DBConnection {

	private static final Logger logger = Logger.getLogger(ServletContextListener.class.getName());

	// Descomentar si se se va a usar un Listener para iniciar la conexión:
	public void contextInitialized(ServletContextEvent event) {

		// Comentar si se va a usar un Listner para iniciar la conexión:
		// public Connection create(){

		logger.info("Creating DB");
		Connection conn = null;

		try {
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			// Descomentar las siguientes líneas para su uso en nuestra
			// aplicación web y comentar para pruebas solo del DAO:
			ServletContext sc = event.getServletContext();

			conn = DriverManager.getConnection("jdbc:hsqldb:file:" + sc.getRealPath("WEB-INF/exchange/"), "sa", // username
					""); // password
			// Comentar las siguientes línea para su uso en nuestra aplicación
			// web y comentar para pruebas solo del DAO:
			// conn =
			// DriverManager.getConnection("jdbc:hsqldb:mem:/localhost/news",
			// "sa", // username
			// ""); //password

			Statement stmt = conn.createStatement();

			// Init db schema
			try {
				stmt.executeUpdate(
						"CREATE TABLE IF NOT EXISTS User (IDU INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
								+ "USERNAME VARCHAR(18) UNIQUE NOT NULL, " + "PASSWORD VARCHAR(400) NOT NULL, "
								+ "EMAIL VARCHAR(50) NOT NULL, " + "LOCALIZACION VARCHAR(50) NOT NULL, "
								+ "COMUNICACION VARCHAR(50) NOT NULL)");

				stmt.executeUpdate(
						"CREATE TABLE IF NOT EXISTS Language (IDL INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,"
								+ "LANGNAME VARCHAR(18) NOT NULL) ");

				stmt.executeUpdate("CREATE TABLE IF NOT EXISTS Users_Languages (" + "IDU INTEGER NOT NULL, "
						+ "IDL INTEGER NOT NULL, " + "LEVEL VARCHAR(7) NOT NULL, " + "PRIMARY KEY(IDU,IDL), "
						+ "FOREIGN KEY (IDU) REFERENCES USER(IDU) ON DELETE CASCADE, "
						+ "FOREIGN KEY (IDL) REFERENCES LANGUAGE(IDL) ON DELETE CASCADE)");

				stmt.executeUpdate(
						"CREATE TABLE IF NOT EXISTS Comment (IDC INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY, "
								+ "SENDER INTEGER NOT NULL, " + "RECEIVER INTEGER NOT NULL, " + "TIMESTAMP BIGINT,"
								+ "TEXT  VARCHAR(400) NOT NULL, "
								+ "FOREIGN KEY (SENDER) REFERENCES USER(IDU) ON DELETE CASCADE,"
								+ "FOREIGN KEY (RECEIVER) REFERENCES USER(IDU) ON DELETE CASCADE)");

			} catch (SQLException e) {
				e.printStackTrace();
			}

			long currentTime = System.currentTimeMillis();

			// init data
			stmt.executeUpdate(
					"INSERT INTO User (username, password, email, localizacion, comunicacion) SELECT 'admin', 'c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec', 'admin@admin.es', 'Caceres', 'Skype' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where username='admin')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO User (username, password, email, localizacion, comunicacion) SELECT 'han', 'a31fceafc861c560f8e685ff48d0fde681f8d044a99ac974dec4d6e2fea9f4903c345eef13d9cd1d5854a89e132e5fc0497b533fc5057593b357c911a7b10453', 'han.solo@lightsideoftheforce.org', 'Caceres', 'FACE to FACE' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where username='han')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO User (username, password, email, localizacion, comunicacion) SELECT 'leia', '17d57e2930ffb4973a20ac2a6ffd896c5899e53683afd803ec068c9697fe289398313f154e1a6e18c04056e5b19a0465d1df958902d924031566dedef9e44d9f', 'leia.organa@lightsideoftheforce.org', 'Montijo', 'Skype' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where username='leia')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO User (username, password, email, localizacion, comunicacion) SELECT 'luke', '372bb24fa202d0a3798cca351aac20c7871562db5c858b1f2c15b35cd86e77a90a96db5d4c1498281740f60a67dffb54815295e6658c87aee552e1ae43d2c71d', 'luke.skywalker@lightsideoftheforce.org', 'Caceres', 'Skype' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where username='luke')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO User (username, password, email, localizacion, comunicacion) SELECT 'emperor', 'd696764c7c4fcfa3914edb377b325cd4717c748616098517ff59edbe8bf83c8c0b717d64707abdf9cedb010ce680be27dc00b06f065a22a5cd93887af3b20d6f', 'emperor.palpatine@darksideoftheforce.org', 'Badajoz', 'Whatsapp' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from User where username='emperor')  LIMIT 1");

			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'English' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='English')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Spanish' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Spanish')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'French' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='French')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'German' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='German')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Portuguese' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Portuguese')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Chinese' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Chinese')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Arabic' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Arabic')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Japanese' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Japanese')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Russian' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Russian')  LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO Language (langname) SELECT 'Italian' FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Language where langname='Italian')  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 0,0,'Native'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=0 and idl=0)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 1,1,'Native'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=1 and idl=1)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 2,2,'Native'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=2 and idl=2)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 3,0,'Native'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=3 and idl=0)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 4,1,'Native'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=4 and idl=1)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 0,1,'B1'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=0 and idl=1)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 1,0,'B2'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=1 and idl=0)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 2,3,'C1'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=2 and idl=3)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 3,3,'C1'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=3 and idl=3)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO Users_Languages (idu,idl,level) " + "SELECT 4,0,'A2'"
					+ "FROM INFORMATION_SCHEMA.TABLES WHERE not exists (select  * from Users_Languages where idu=4 and idl=0)  LIMIT 1");

			stmt.executeUpdate("INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " + "SELECT 1," + "0,"
					+ (currentTime - 4 * 24 * 60 * 60 * 1000) + ","
					+ "'I would like to speak with you in Spanish and English via Skype' " + // extra
																								// los
																								// medios
																								// de
																								// comunicación
					"FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 0) LIMIT 1");
			stmt.executeUpdate("INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " + "SELECT 0," + "1,"
					+ (currentTime - 24 * 60 * 60 * 1000) + ","
					+ "'Ok, write me a message via Skype, mi user is @vader' " + "FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 1) LIMIT 1");
			stmt.executeUpdate("INSERT INTO COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " + "SELECT 2," + "4,"
					+ (currentTime - 75 * 60 * 1000) + ","
					+ "'I would like to write you in Chinese and Japanese via email' "
					+ "FROM INFORMATION_SCHEMA.TABLES "
					+ "WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 2) LIMIT 1");
			stmt.executeUpdate(
					"INSERT INTO  COMMENT (SENDER, RECEIVER, TIMESTAMP, TEXT) " + "SELECT 4," + "2," + (currentTime)
							+ "," + "'Ok, write me to the email of my profile' " + "FROM INFORMATION_SCHEMA.TABLES "
							+ "WHERE NOT EXISTS (SELECT * FROM COMMENT WHERE IDC = 3) LIMIT 1");


			// Descomentar las siguientes líneas para su uso en nuestra
			// aplicación web y comentar para pruebas solo del DAO:
			sc.setAttribute("dbConn", conn);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		logger.info("DB created");

		// return conn;
	}

	// Descomentar si se se va a usar un Listener para destruir la conexión:
	public void contextDestroyed(ServletContextEvent arg0) {
		// Comentar si se va a usar un Listener para destruir la conexión:
		// public void destroy(Connection conn){

		logger.info("Destroying DB");
		try {
			logger.info("DB shutdown start");
			// Descomentar si se se va a usar un Listener para destruir la
			// conexión:
			ServletContext sc = arg0.getServletContext();
			Connection conn = (Connection) sc.getAttribute("dbConn");
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("SHUTDOWN");
			conn.close();
			Enumeration<Driver> drivers = DriverManager.getDrivers();
			while (drivers.hasMoreElements()) {
				logger.info("DB deregistering drivers");
				Driver driver = drivers.nextElement();
				try {
					DriverManager.deregisterDriver(driver);
					logger.info(String.format("deregistering jdbc driver: %s", driver));
				} catch (SQLException e) {
					logger.severe(String.format("Error deregistering driver %s %s", driver, e));
				}

			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		logger.info("DB destroyed");
	}

}
